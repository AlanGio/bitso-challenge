{"version":3,"sources":["api/index.tsx","api/getJoke.tsx","components/Controls/index.tsx","components/Grid/index.tsx","utils/utils.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["api","getJoke","axios","get","COLS_MAX","isMobile","ROWS_MAX","Controls","columns","onChangeColumns","onChangeRows","rows","islands","className","Container","fluid","Form","Row","Col","sm","xs","Group","controlId","Label","Control","type","onChange","min","max","value","Badge","variant","Grid","cells","onClickCell","map","_","indexRow","cell","indexColumn","classnames","land","onClick","uniqueId","loadItems","newCells","deltaRows","length","deltaColumns","i","Math","abs","pop","push","newRow","x","rowNum","row","y","walkIsland","visitMap","colNum","rowNbr","colNbr","n","withinBounds","App","useState","setColumns","setRows","setCells","then","response","console","log","handleChangeColumns","useCallback","event","columnsQty","target","handleChangeRows","rowsQty","handleOnClickCell","column","selectedCells","count","detectIslands","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e51e5bbb.chunk.js","sourcesContent":["import getJoke from './getJoke';\n\nconst api = {\n  getJoke,\n};\n\nexport default api;\n","/* eslint-disable no-undef */\nimport axios from 'axios';\n\nexport const getJoke = () => {\n  return axios.get(\n    `https://official-joke-api.appspot.com/random_joke`\n  );\n};\n\nexport default getJoke;\n","import React, { ChangeEvent } from \"react\";\nimport { isMobile } from \"react-device-detect\";\nimport { Badge, Container, Col, Form, Row } from \"react-bootstrap\";\n\nimport \"./Controls.scss\";\n\nexport type ControlsProps = {\n  columns: number;\n  onChangeColumns: (event: ChangeEvent<HTMLInputElement>) => void;\n  onChangeRows: (event: ChangeEvent<HTMLInputElement>) => void;\n  rows: number;\n  islands: number;\n};\n\nconst COLS_MAX = isMobile ? 10 : 50;\nconst COLS_MIN = 2;\nconst ROWS_MAX = COLS_MAX;\nconst ROWS_MIN = COLS_MIN;\n\nexport const Controls = ({\n  columns,\n  onChangeColumns,\n  onChangeRows,\n  rows,\n  islands,\n}: ControlsProps) => (\n  <div className=\"component-controls\">\n    <Container className=\"controls-container\" fluid>\n      <Form>\n        <Row className=\"align-items-center\">\n          <Col sm={5} xs={12}>\n            <Form.Group controlId=\"columnsRange\">\n              <Form.Label>Columns {columns}</Form.Label>\n              <Form.Control\n                type=\"range\"\n                onChange={onChangeColumns}\n                min={COLS_MIN}\n                max={COLS_MAX}\n                value={columns}\n              />\n            </Form.Group>\n          </Col>\n          <Col sm={5} xs={8}>\n            <Form.Group controlId=\"rowsRange\">\n              <Form.Label>Rows {rows}</Form.Label>\n              <Form.Control\n                type=\"range\"\n                onChange={onChangeRows}\n                min={ROWS_MIN}\n                max={ROWS_MAX}\n                value={rows}\n              />\n            </Form.Group>\n          </Col>\n\n          <Col sm={2} xs={4}>\n            <h5>\n              <Badge variant=\"secondary\">Islands: {islands}</Badge>\n            </h5>\n          </Col>\n        </Row>\n      </Form>\n    </Container>\n  </div>\n);\n\nexport default Controls;\n","import { Container, Row, Col } from \"react-bootstrap\";\nimport { uniqueId } from \"lodash\";\n\nimport classnames from \"classnames\";\n\nimport \"./Grid.scss\";\n\nexport type GridProps = {\n  cells: boolean[][];\n  onClickCell: (row: number, column: number) => void;\n};\n\nexport const Grid = ({ cells, onClickCell }: GridProps) =>  (\n  <div className=\"component-grid\">\n    <Container className=\"grid-container\" fluid>\n      {cells.map((_, indexRow) => (\n        <Row key={uniqueId(\"row_\")} className=\"cell-row\">\n          {cells[indexRow].map((cell, indexColumn) => (\n            <Col\n              key={uniqueId(\"col_\")}\n              className={classnames(\"cell\", { land: cell })}\n              onClick={() => onClickCell(indexRow, indexColumn)}\n            ></Col>\n          ))}\n        </Row>\n      ))}\n    </Container>\n  </div>\n);\n","export const loadItems = (\n  columns: number,\n  rows: number,\n  cells: boolean[][] = []\n) => {\n  const newCells = [...cells];\n  const deltaRows = rows - newCells.length;\n  const deltaColumns =\n    rows === deltaRows ? columns : columns - newCells[0].length;\n\n  for (let i = 0; i < Math.abs(deltaRows); i++) {\n    deltaRows < 0\n      ? newCells.pop()\n      : newCells.push(newRow(columns - deltaColumns));\n  }\n\n  for (let x = 0; x < Math.abs(deltaColumns); x++) {\n    for (let rowNum = 0; rowNum < newCells.length; rowNum++) {\n      deltaColumns < 0 ? newCells[rowNum].pop() : newCells[rowNum].push(false);\n    }\n  }\n  return newCells;\n};\n\nexport const newRow = (columns: number) => {\n  const row = [];\n  for (let y = 0; y < columns; y++) {\n    row[y] = false;\n  }\n  return row;\n};\n\nexport const detectIslands = (\n  columns: number,\n  rows: number,\n  cells: boolean[][]\n) => {\n  const visitMap: boolean[][] = [];\n  for (let rowNum = 0; rowNum < rows; rowNum++) {\n    visitMap.push([]);\n    for (let colNum = 0; colNum < columns; colNum++) {\n      visitMap[rowNum].push(false);\n    }\n  }\n\n  let count = 0;\n  for (let rowNum = 0; rowNum < rows; rowNum++) {\n    for (let colNum = 0; colNum < columns; colNum++) {\n      if (cells[rowNum][colNum] && !visitMap[rowNum][colNum]) {\n        walkIsland(cells, visitMap, rowNum, colNum);\n        count++;\n      }\n    }\n  }\n\n  return count;\n};\n\nexport const walkIsland = (\n  cells: boolean[][],\n  visitMap: boolean[][],\n  rowNum: number,\n  colNum: number\n) => {\n  const rowNbr = [-1, 0, 0, 1];\n  const colNbr = [0, -1, 1, 0];\n  visitMap[rowNum][colNum] = true;\n\n  for (let n = 0; n < rowNbr.length; n++) {\n    if (withinBounds(cells, visitMap, rowNum + rowNbr[n], colNum + colNbr[n])) {\n      walkIsland(cells, visitMap, rowNum + rowNbr[n], colNum + colNbr[n]);\n    }\n  }\n};\n\nexport const withinBounds = (\n  cells: boolean[][],\n  visitMap: boolean[][],\n  rowNum: number,\n  colNum: number\n) =>\n  rowNum >= 0 &&\n  rowNum < cells.length &&\n  colNum >= 0 &&\n  colNum < cells[0].length &&\n  cells[rowNum][colNum] &&\n  !visitMap[rowNum][colNum];\n","import React, { ChangeEvent, useCallback, useState } from \"react\";\n\nimport api from \"./api\";\n\nimport { Controls } from \"./components/Controls\";\nimport { Grid } from \"./components/Grid\";\n\nimport { loadItems, detectIslands } from \"./utils/utils\";\n\nimport \"./App.scss\";\n\nexport const COL_INIT = 4;\nexport const ROW_INIT = COL_INIT;\n\nconst App = () => {\n  const [columns, setColumns] = useState<number>(COL_INIT);\n  const [rows, setRows] = useState<number>(ROW_INIT);\n  const [cells, setCells] = useState<boolean[][]>(loadItems(columns, rows));\n\n  api.getJoke().then((response) => console.log(response, 'Joke!'));\n\n  const handleChangeColumns = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const columnsQty = +event.target.value;\n      setColumns(columnsQty);\n      setCells(loadItems(columnsQty, rows, cells));\n    },\n    [cells, rows]\n  );\n\n  const handleChangeRows = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      const rowsQty = +event.target.value;\n      setRows(rowsQty);\n      setCells(loadItems(columns, rowsQty, cells));\n    },\n    [cells, columns]\n  );\n\n  const handleOnClickCell = useCallback(\n    (row: number, column: number) => {\n      let selectedCells = [...cells];\n      selectedCells[row][column] = !selectedCells[row][column];\n      setCells(selectedCells);\n    },\n    [cells]\n  );\n\n  const islands = detectIslands(columns, rows, cells);\n\n  return (\n    <div className=\"App\">\n      <Controls\n        columns={columns}\n        onChangeColumns={handleChangeColumns}\n        onChangeRows={handleChangeRows}\n        rows={rows}\n        islands={islands}\n      />\n      <Grid cells={cells} onClickCell={handleOnClickCell} />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}